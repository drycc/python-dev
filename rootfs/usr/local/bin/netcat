#!/usr/bin/env python
import sys
import time
import getopt
import socket
import contextlib

from urllib import parse
from urllib.request import urlopen


usage = """
usage: netcat [-h help] [-s separator] [-a address] [-u url] [-g get] [-f frequency]

netcat -s , -a 192.168.1.100:80,192.168.1002:80 -f 100
netcat -s , -u postgres://baidu.com,redis://10.1.0.2:5432
netcat -s , -g https://www.baidu.com,https://www.taobao.com
"""


DEFAULT_SCHEME_PORTS = {
    "http": 80,
    "https": 443,
    "redis": 6379,
    "postgres": 5432,
    "mysql": 3306,
}


def netcat_addrs(addrs, separator, frequency, verbose):
    for addr in addrs.split(separator):
        ip, port = addr.split(":")
        for _ in range(frequency):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            try:
                sock.connect((ip, int(port)))
                print(f"Connection to {ip} port {port} succeeded!")
                break
            except BaseException as e:
                if verbose:
                    print(f"netcat: connect to {ip} port {port} failed: {e}")
                else:
                    print(f"netcat: connect to {ip} port {port} failed!")
            finally:
                sock.close()
            time.sleep(1)

def netcat_gets(urls, separator, frequency, verbose):
    for url in urls.split(separator):
        for _ in range(frequency):
            try:
                with contextlib.closing(urlopen(url)) as response:
                    print(f"Connection to {url} succeeded, status: {response.status}")
                    break
            except BaseException as e:
                if verbose:
                    print(f"netcat: connect to {url} failed: {e}")
                else:
                    print(f"netcat: connect to {url} failed!")
            time.sleep(1)

def netcat_urls(urls, separator, frequency, verbose):
    addrs = []
    for url in urls.split(separator):
        parse_result = parse.urlparse(url)
        if "@" in parse_result.netloc:
            netloc = parse_result.netloc.split("@")[1]
        else:
            netloc = parse_result.netloc
        if not netloc:
            print(f"netcat: url format error {url}")
            continue
        elif ":" in netloc:
            host, port = netloc.split(":")
        else:
            host = netloc
            port = DEFAULT_SCHEME_PORTS.get(parse_result.scheme, None)
            if port is None:
                print(f"netcat: no port found in url {url}")
                continue
        addrs.append(f"{host}:{port}")
    netcat_addrs(separator.join(addrs), separator, frequency, verbose)


def main():
    try:
        options, _ = getopt.getopt(
            sys.argv[1:],
            "hva:u:g:s:f:",
            ['help', 'verbose', "address=", "url=", "get=", "separator=", "frequency="]
        )
        verbose, frequency = False, int(time.time())
        addrs, urls, gets, separator = None, None, None, ","
        for name, value in options:
            if name in ('-a', '--address'):
                addrs = value
            elif name in ('-u', '--url'):
                urls = value
            elif name in ('-g', '--get'):
                gets = value
            elif name in ('-s', '--separator'):
                separator = value
            elif name in ('-f', '--frequency'):
                frequency = int(value)
            elif name in ('-v', '--verbose'):
                verbose = True
        addrs, urls = map(
            lambda x: x.strip('"').strip("'") if x else x,
            (addrs, urls)
        )
        if gets:
            netcat_gets(gets, separator, frequency, verbose)
        if addrs:
            netcat_addrs(addrs, separator, frequency, verbose)
        if urls:
            netcat_urls(urls, separator, frequency, verbose)
    except getopt.GetoptError:
        print(usage)


if __name__ == "__main__":
    main()
